7/31/2022
    SQLite last_rowid: function callable that returns the INTEGER PRIMARY KEY value of the last inserted row on the given
                       connection.

7/22/2022
    Guard function: Think about adding a 'location_required' function to endpoints to make sure
                    user has selected a store before submitting a request
7/21/2022
    Relevant product search fields (bacon):

       productId:
       upc:
       brand: Oscar Mayer   <-- Ignoring this because it seems redundant AND not every product has one
       description: Oscar mayer Fully Cooked Thick Cut Bacon
       images: Link to them so the weight/volume info can be readily obtained


    Also includes URLs to images that we can display. Perhaps later.

7/20/2022
    CORS and stuff: Only necessary when I want the cookies to be exchanged/transmitted. I can omit all of the
    code required e.g. Access-Control-Allow-Origin if I want a basic API reply, like a 400 error + basic
    error message.


    Location endpoints are operational. There is not exhaustive error checking on client submissions. Will also
    want to create a translation table for the "chain" values from Kroger API to filter out trash like 'SHELL COMPANY'
    and make 'FRED' into 'Fred Meyer', etc.

7/13/2022
    branch no_cookie is meant to eliminate the setting of the username cookie. Username and location values
    will be passed as JSON following a 200 response. Session cookie will persist so technically the user wouldn't have
    to re-login every time they close the window but this is easiest for now.

    SQL table has been updated to include location columns

7/7/2022
    Token management on the server side seems complete. Communicator silently refreshes token if needed.
    Guard function acting as sentinel before making kroger endpoint calls in place. Workflow for updating
    session with token info seems good.

    At this point the core of the back end is complete. It is now just a matter of adding the specific code
    new endpoints will require.

    Reminder that all of the cross origin headers are to facilitate dev on localhost.

    location values returned from Kroger with 'SHELL COMPANY' for the chain value appear to be shell gas stations.

7/6/2022

Design decision: tokens and values will be stored in the session cookie. Updated by the login and authcode_from
                endpoints. Communicator wil also update the session and db as it is responsible for exchanging tokens.
                All endpoints that reach out to kroger will be wrapped with a token checker so that the client
                can be alerted when a reauthorization is required.


7/5/2022


Kroger networking issue:
1) Use dummy Kroger API data locally. So actually utilize the FLASK_ENV value appropriately. Set DEBUG flag
    when not using FLASK_ENV="development" to retain reloading and debuggin features.
2) Write script on AWS to pull changes and find-and-replace htt://localhost with htt://{ip} using sed -i.


AWS: The default environment variables are set in /etc/profile


6/22/2022

At some point the client requests become sufficiently complex as to require "preflight" OPTIONS requests.
This necessitated an explicit response in the case of OPTIONS request to include:
    Access-Control-Allow-Origin: 'http://localhost:3000'
    Access-Control-Allow-Credentials: 'true'
    Access-Control-Allow-Headers: 'Content-Type'
and the same headers included in the follow-up to the subsequent POST request. Otherwise
we get a bunch of annoying CORS errors.

session.permanent = True seems to have solved the missing session cookie problem.  Hallelujah


6/17/2022

In order to process JSON from client: Must be a POST request (or at least not a GET request) and the client must
specify 'Accept': 'application/json' and 'Content-Type': 'application/json' headers.  Otherwise, attempting to access
the request object fails and immediately returns a 400 error to the client.


6/16/2022
Had to install the flask-cors module to enable CORS. This is because the react SPA is served from a different
port than the flask API.

Additionally, the CORS object needs to allow cross origin credentials (meaning cookies can be read from a different
domain?) to get around the same problem and allow the session cookie to work.

